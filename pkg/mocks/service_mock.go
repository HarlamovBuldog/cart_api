// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

package mocks

import (
	context "context"
	reflect "reflect"

	"github.com/HarlamovBuldog/cart_api/pkg/service"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockService) EXPECT() *MockServiceMockRecorder {
	return _m.recorder
}

// AddCart mocks base method
func (_m *MockService) AddCart(ctx context.Context) (*service.Cart, error) {
	ret := _m.ctrl.Call(_m, "AddCart", ctx)
	ret0, _ := ret[0].(*service.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCart indicates an expected call of AddCart
func (_mr *MockServiceMockRecorder) AddCart(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddCart", reflect.TypeOf((*MockService)(nil).AddCart), arg0)
}

// Cart mocks base method
func (_m *MockService) Cart(ctx context.Context, id string) (*service.Cart, error) {
	ret := _m.ctrl.Call(_m, "Cart", ctx, id)
	ret0, _ := ret[0].(*service.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cart indicates an expected call of Cart
func (_mr *MockServiceMockRecorder) Cart(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Cart", reflect.TypeOf((*MockService)(nil).Cart), arg0, arg1)
}

// AddItemToCart mocks base method
func (_m *MockService) AddItemToCart(ctx context.Context, cartID string, productName string, quantity float64) (*service.CartItem, error) {
	ret := _m.ctrl.Call(_m, "AddItemToCart", ctx, cartID, productName, quantity)
	ret0, _ := ret[0].(*service.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItemToCart indicates an expected call of AddItemToCart
func (_mr *MockServiceMockRecorder) AddItemToCart(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddItemToCart", reflect.TypeOf((*MockService)(nil).AddItemToCart), arg0, arg1, arg2, arg3)
}

// RemoveItemFromCart mocks base method
func (_m *MockService) RemoveItemFromCart(ctx context.Context, cartID string, cartItemID string) error {
	ret := _m.ctrl.Call(_m, "RemoveItemFromCart", ctx, cartID, cartItemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItemFromCart indicates an expected call of RemoveItemFromCart
func (_mr *MockServiceMockRecorder) RemoveItemFromCart(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveItemFromCart", reflect.TypeOf((*MockService)(nil).RemoveItemFromCart), arg0, arg1, arg2)
}
